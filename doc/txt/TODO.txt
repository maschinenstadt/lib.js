------------------------------------------------------------------------------------------------------

	=> check if browser really returns Uint8Array (buffer) on _encoding = false!!!!


# buffer

# radix

# octal
# decimal
# dual

# base64
# hex
	# utf8
	# utf16le|ucs2
# binary|latin1
	# ascii


		-> MAKE ALL THESE WORK IN .. (a) "crypto" module .. (b) "/dev/urandom" .. (c) BROWSER ...!!

			=> also @ "file" level .. file.random .. file.readBytes ...!!!


				// < https://developer.mozilla.org/de/docs/Web/API/TextEncoder >
				// < https://developer.mozilla.org/de/docs/Web/API/TextDecoder >

				// < https://www.google.de/search?q=javascript+math.random >

======================================================================================================
			ZUM SCHLUSS ARBEITE ALLE /maschinenstadt/doc/txt/ (min.) AB. ...
======================================================================================================

	# Math.random => file.random.decimal etc..

		=> ja .. auf basis von "util/random". im web also "window.crypto" etc. .. mit FALLBACK!!!

		=> TODO: "main/150_random.js" -> uncomment "Math.random = main.random", when it's done!

				var chance = new Chance(function() {
					var arr = new Uint32Array(1);
					window.crypto.getRandomValues(arr);
					// This jazz is necessary to translate from a random integer to a floating point from 0 to 1
					return arr[0]/(0xffffffff + 1);
				});
				// Now chance will use window.crypto for random rather than the Mersenne Twister

			=> OR: generate str = '0.' + .. randomized decimal symbols to max. float nachkomma length; then "Number(str)"! ;-)´

				=> but: sometimes we got .. bzw.

					(a) pure 0.0
					(b) pure 1.0
					(c) various anzahl der nachkommastellen

						=> perfekt lösbar: eine zusätzliche random-hebelung auf höherer, abstr. ebene (höhere loop?);
							.. so dass eine länge von ziel-string(/-zahl) bestimmt wird. bei =(1) dann 0.0 vs. 1.0! ;-D

------------------------------------------------------------------------------------------------------

	# "util/random" ...

		@ "BROWSER" part doesn't support BUFFER return..

			=> Uint8Array() .. müssen wir evtl. zusammenfügen o.ä. .. GERADE BEI MEHREREN "iterations".. oder eben wg. _length!

		@ "BROWSER" also doesn't support "utf8" charset return..

		@ "crypto" .. TODO!

				< https://nodejs.org/dist/latest/docs/api/crypto.html#crypto_crypto_randombytes_size_callback >

			=> to test it, set a non-existing path in "settings.random.entropy"! ;-)´

------------------------------------------------------------------------------------------------------

	=> diverse system-/charset-/type-konversionen testen evtl. (v.a. wg. performance? aber auch entropie?!). ..

		...  (man kann ja alles immer ganz verschieden lösen.. mal mehr, mal minder abstrakt (strings vs. numbers etc.); ..

		=> viele interessante aspekte, die das prinzip "information" und ihre "codierbarkeit" aufweist!

			=> konversionen am wichtigsten. gerade abstrakt vs. konkret und innen vs außen. @ quantensystem(e)!! ..

			=> codierungen in codierungen .. systeme enthalten andere systeme(?!!) ... "rekursion" .. (TODO)(!!!!)

------------------------------------------------------------------------------------------------------

	# BROWSER

		# performance[.now()]

		# hrtime(r) @ "Date"?!!! (btw. "util/time" HAS GONE (for all in "Date"!)!

------------------------------------------------------------------------------------------------------

	# use "requestAnimationFrame" in browser. .. (l8rs(!) mainly for <canvas> ..

		.. w/ "delta" (so use "util/time" maybe? AND VECTOR/MATRIX - TODO)

			=> "util/time"? HAS GONE!! implement everything into "Date"!!!

------------------------------------------------------------------------------------------------------

	# global.file.readBytes() ..

		=> w/ "_start" sowie "_length" .. nicht nur einmal "_size"! geht das (mit node.js hausmitteln)? ;-)

------------------------------------------------------------------------------------------------------

	!!! .. *überall* SYNC AND ASYNC!!!

	# vor allem ALLES *AUCH* *ASYNC* lösen/anbieten!!

			.. hasse jetzt auch: "settings.default = 'sync||async'".

				=> AUTOMATISCHE AUSWAHL JE NACH SETTING von ".async()" oder ".sync()"

					=> einfach an jede funktion noch ".async"-funktion hinzu implementieren

					=> evtl. zusätzlich ".sync" mit verweis auf die ursprüngliche funktion auch noch dazu?

		=> SYNC ist perfekt, ein serieller prozess/flow, um eigene sw-proz-stacks usw zu integrieren. bessere verwaltbarkeit.

			.. aber sonst, regulär verwendet (ohne meine ziel-engine) ist ASYNC für (node.)js-scripts besser (eh?) .. also TODO (eh)!

------------------------------------------------------------------------------------------------------

	# TODO: @ web-browser: "web.console" w/ "console.inspect()" u.a. etc. pp. .. ;-)´

		=> good question: wäre es gute basis, wenn ich das gesamte "Node.js" (bzw. dessen api)
			.. in den web-browser hinein brächte?

				.. ich würde dann einfach alles server-seitige via "WebSocket API" übertragen;
					.. natürlich mit inter-process-communication etc. ..

					=> MAL SEHEN. future.

		=> aber eine console mit TABELLEN-ausgabe, z.b. für FILE.LIST() (server-seiten-fs oder lokale fs-struct w/ ws://-daten-CODE!?)?!

		=> ALLES im web-browser durch TABELLEN codieren!?!!?

			=> vs. <canvas> web.drawing() ... eigene, ewige zeichenfläche (war ewigkeit/unendlichkeit === maßstände/einheiten(/systeme/freq.)!?

------------------------------------------------------------------------------------------------------

	# GRUNDSÄTZLICH "Object.defineProperty()" verwenden! ... zur implementation, auch bei prototype.

		=> d.h. eine extension der "Object.defineProperty()" könnte uns zur automatischen api-generierung führen!!!!

		=> # use getters/setters for much variables (atm in functions) .. see "doc/txt/JavaScript.txt".

------------------------------------------------------------------------------------------------------

	# "util/getopt" w/ "main/040_getopt.js"...!!!!!!!!!!! (endlich mal machen!

		=> eine 'String' funktion wg. argv w/ anführungszeichen (gehören zusammen! parse()!)

		=> [genauso wie virtual polymorphy @ "Arguments"!]

------------------------------------------------------------------------------------------------------

	# think GLOBALLY about Error/Exception handling (strucutres or algoirhtms or so)....

		=> *BEST* *SEE* "/doc/PARADIGMEN-WECHSEL.odt"!!!!!!!!!!! ganz neues sw-konzept! hier passt das alles gut mit rein.

		=> und natürlich die objekte mit eigenen konsolen(-streams) etc. .. evtl. wohl auch parser() usw. ..

			=> statt "process.stdout" etc. .. => REMOTE-STREAM @ (MUD-(channel-))SYNCHRONISATION w/ prozess-sync etc.!

				=> danach "application()", "form(s)", .. bis [MS] "ACCESS" @ datenbank+formulare+events @ APP-server! ;-)´

------------------------------------------------------------------------------------------------------

	# global.file.path();

		# windows etc. optimization. currently extepected to only work on linux based systems.
		`==> mabe I should replace '/' by '\\' (vice versa) on windows (etc.?) systems!? (then use file.path() or so for every path)

			=> w/ separator (oder welcher das auch noch war..)

			=> resolve(), too!? ;-)´

			=> überall, wo pfade angegeben werden, durch "file.path()" schicken!! ..

				=> dazu DON'T FORGET: "/doc/PARADIGMEN-WECHSEL.odt"!!

			# all paths to be checked: if directory, append '/' to mark it as dir! (but performance check, please.. sonst anders(wo)!?)

------------------------------------------------------------------------------------------------------

	# "util/base" for base32/base64

		=> [BROWSER] base32 gibt's wohl nicht nativ, muss ich selbst. im BROWSER aber base64(!) mit "atob()" und "btoa()".

		=> [NODE.JS] beides ist noch zu implementieren. manuell. gibt's da was fertiges in Node.js??

------------------------------------------------------------------------------------------------------

	# "util/radix" for *EVERYTHING* (belibeige system-konversionen @ quantensystems etc.)

			.. so will ich ja

		=> zahlenstrahl!?! oder welches mittel noch besser? (suche "die zahl"..)!

		=> beliebiges hin und her zw. allen systemen ...

			=> evtl. auch abstraktes vs. konkretes. also innen vs. außen; z.b. ein quadrat. x*y feld.
				.. oder ein string, wo es um die offset-längen statt der byte-werte geht (in/out mirror)

		=> EVTL. schon @ EIGENE (Big-)NUMBER!?! "Figure" .. w/ ABSTRAKT vs. KONKRET! etc. .. "Number" ersetzen - oder noch dazu!?


		# "global/String" for js-internal sys-conversions .. auf basis der byte-werte und toString(_radix)! ;-)´

			.. u.a. wg. konversion von daten (auch utf-8 uvm.!!) z.b. in's binäre o.ä. systeme (z.b. wegen
				.. daten-(bank-)codierungen!)

			=> TODO: nachher performance checken (und mehr noch?). dann entscheiden, wie daten für datenbank-
				CARRIER-CODE zu konvertieren (und weiterverwenden) sein werden! ...

------------------------------------------------------------------------------------------------------

	# crypto -> tls -> abstrashiern wg. evtl. anderer crypto-verfahren!!!

		=> und use 'crypto/tls/stream' or so .. wg. "pipe()" aller daten.. genauso bei anderen crypto-verfahren, hm?!

			bedenke auch umgekehrten weg.. server verbinden mit einem beliebigen(!!) crypto-verfahrens-pipe()
			und dann umsetzen .. ähnlich net.filter-vpn-tunnel o.ä. .. so möchte ich alle protokolle durch meine
			eigenen server-+client-sockets beliebig chifrrieren können! unabhängig davon, ob das regulär supported wird;

			... ebenso mit "SSH"-tunnel(-stream)! ;-D´
				... dazu einfach putty-crypto-TUNNEL-verbindung evtl.; hm!? ;-D

		=> bedenke: "include('crypto/' + _type)" ;-D

			=> muss dann "*/stream.js" bestehen? oder was verwende ich?

				.. am besten ein (quasi-)"Interface" für ALLE crypto-verfahren. dazu konkrete _type-einsetzung.

					=> use "/crypto/stream.js" wg. "/crypto/${type}/stream.js"

------------------------------------------------------------------------------------------------------

		@ doc/txt/HTTP....txt (v.a. wegen TLS-SNI ..!!)

			< https://stackoverflow.com/questions/35586957/nodejs-starttls-use-sni >
			< https://stackoverflow.com/questions/12219639/is-it-possible-to-dynamically-return-an-ssl-certificate-in-nodejs >

			< https://journal.paul.querna.org/articles/2010/09/04/limiting-concurrency-node-js/ >
			< https://www.sitepoint.com/how-to-use-ssltls-with-node-js/ >

------------------------------------------------------------------------------------------------------

	# net/(server/)...
!!!	=> callbacks automatisch zusammen setzen. .. aus initialem setup() .. hin zu "this.callbacks" 4 foreign;

		=> events & callbacks .. @ OWN <Event> class or so .. von wegen "this.event...(add() z.b.)" [w/ fire() @ func-call?]

			=> und .. multiple callbacks .. alle in einem array und der reihe nach (async!!!) aktivieren (arr.forEach() ;)

			=> REMOTE-event+callback ... so wie <Stream>-synchronisation und deren "member"-liste w/ anmeldung (w/ passwd zb)

					.. @ "system/event"

!!!!!!!!! =>>			=> use "node.uuid" - so ANY OBJECT can be REMOTE!!!!!

!!!!!!!! -->				=> node.event = new system/event(); .. <- use this!

!!!!!!			.. see "/doc/APP-Server.odt"(!!!!!!!!!!)

------------------------------------------------------------------------------------------------------

	# überlege wg. "class"es wie ..

		# "core/event"
		# "mud/entity"

		... usw., wie ich das konstruieren möchte. klar ist z.b., dass "event" überall gebraucht wird, grundsätzlich.
		aber dann gibt's auch noch die basis-klasse "node", die im prinzip am ende aller klassen zur abs. basis wird.
		.. sollte das event auch hoch abstrakte basis sein - oder sogar erst vom "node" 'extended' werden? .. UND wo-
		rauf basiert das "event" weitergehend? evtl. auf (oo-(konsolen-))streams(-sync.)?!? usw. ...

		.. hin zu netzwerk-klassen sehr wichtig z.b. .. inkl. folgendem, also automatische event-registrierung durch listen, ..

		=> auch wichtig: "net/filter(.js)"! ..

------------------------------------------------------------------------------------------------------

	# "autorun" nicht nur in "/home/*/lib.js" (siehe "[global.]path.home"), sondern ALLEN include-dirs! ..

		=> also nur root-js(on)-dateien jeweils .. keine sub-directories ... genauso eben wie @ /home.

------------------------------------------------------------------------------------------------------

	# global.type => _object.constructor.name?

		=> in case we want the original class names..

			.. maybe append this name to the 'Object' result string .. and on type test do if .. "startsWith('Object')"..??!

------------------------------------------------------------------------------------------------------

	# bedenke grundsätlzich - falls möglich - "this"-rückgabe .. für ketten-verschaltung für direkt weitergehende aufrufen.. ;-)´

------------------------------------------------------------------------------------------------------

		# default argument values!!!!!!!!!!!! everywhere...

	# "Function" default argument values .. is not everywhere right now!

		# '||' finden .. sollte das problem evtl. schon erstmals bisschen einkreisen.

	# "interessant"/WICHTIG: alle funktionen so "abschließen", dass keine fehler bei argumente-übergabe geschehen kann. w/ default values

		# überall in funktionen einen genauen check der parameter-übergabe(n) ...

		.. ich habe zwar standard-werte, aber wenn was falsches übergeben wird, entstehen fehler

		=> bitte auflösen via "arguments"-(prototype-)implementation ..

			=> arguments.check(..) w/ type-/klassen-filter v.a.!

			=> arguments.map() => VIRTUAL POLYMORPHY überhaupt richtig integrieren übereall..!!!

				=> relativism? ich sollte mich innherlab der api auf sie selbst mehr beziehen; nicht alles immmer wieder code'n..

!!!	!!	@ VIRTUAL POLYMORPHY:

==>			arguments.map(..); darin dann direkt aufruf via "arguments.callee[result]" (result je nach angenommener argv-zeile);
  ===>>				.. wenn man nämlich jeder funktion einfach zusätzlich "func[-1, 0, (..)]" implementiert!! automatism rulez!!


!! -->>		.. und allg. auch überall noch umfangreiche parameter-checks, inkl. TYPE-CHECKs usw. .. w/ "arguments", too! ^_^

!! -->			=> auch bei "get()" z.b. o.ä. .. nicht nur "arguments", auch sonstige zugriffe *FILTER*-bar machen..!

				(.. siehe "Array.prototype.get(_index, _length, _radix = 1, _typeFilter = [], _inverseTypeFilter = false)" ...)


!	==>					if(global.not(_uuid) || (! global.type(_uuid, 'String')))
!!		===>				{
!!!			=====>				_uuid = uuid.random();
!!!!				======>		}

					=> => => ... genau sowas z.b. .. ersetzen durch automatismus mit "arguments" hilfe z.b. ..
							.. sonst müsste ich das noch ca. so überall einbauen; wg. sicherheit bei der api-nutzung.

	# [global.]not() .. überall ersetzen .. incl. new Error() rückgaben ... (see somewhere below here)

------------------------------------------------------------------------------------------------------

	# alles in "main/" nochmal durchgehen und mit besseren styles versehen (z.b. default values je func., not() w/ return new Error(), ..)
	# alles in "global/" nochmal durchgehen und möglichst sinnvolle gestaltung (w/ abstraktion zu gemeinsamen algo-struct-basics wohl..)

	# "test/" durcharbeiten und bei fertigstellung nach "example/" verschieben. ich teste, dann mach ich beispiele daraus (neben docs) ;-)´

------------------------------------------------------------------------------------------------------

	# web- und console-IDE!? eher: modellierungs-werkzeuge für ...

		(a) 3D-/nD-objekte w/ "Extrusion" etc. und polygon-mesh und anderes mit ZELL-STRUKTUREN ... (bis informations-algorithmen + zahl)

		=> (mit katalog-hierarchie für raumzeit-algorithmen in 3d-welten etc., aber acuh string-dimensionen für layer-algos)

			=> u.a. wg. (mud-mmorpg)-spiele-universen .. mit zellen .. viele, kleine abstrakte regeln (physik z.b.) sowie zell-automation & WELLEN

		(b) [MS] "ACCESS" style 4 APP-Server.. datenbank-modelle und formular-designer ... events dazu und tabellen-calc ..

		(c) alle möglichen apps .. client-GUI/-forms w/ web-server(-verteilung der last etc.) .. & "Desktop", "Scout", .. (@ 3d-büro/-wohnung + chat)

		(d) WICHTIG: "/doc/PARADIGMEN-WECHSEL.odt". neben RAUMZEIT-ALGORITHM. und LAYER-SCRIPT (w/ vollzugriff)

		(e) protokoll, schritte-bewegung, dim. verschiebungen (w/ zeichnungen und addition von koords, größen etc.)

		(f) ynfynyty ... COMMUNITY w/ ALL (verbunden mit Any/Linux oder "Groups" und "TK-MUD-conferences" und stream-broadcast + radio w/ route(+p2p)

		(g) etc. pp.

------------------------------------------------------------------------------------------------------

	# WELLEN .. neben daten auch VISUALISIEREN ... etc. und verarbeiten auf quantifizierungs-grundlage (abzählbarkeiten)

		ALLES DARIN. zellen-rotationen erwirken das letztlich. das ganze universum berechnet durch wellen, wie nanobot-bewegungs-kommunikation.

------------------------------------------------------------------------------------------------------

	# "readline"
		...	< https://nodejs.org/api/readline.html >	..

		=> maybe "console.prompt()" or "console.read()" etc. is better to solve with this?! :-D

		=> maybe "console/ansi(.js)" is not necessary (als ganzes .. evtl. nur zusätzlich wg. FARBEN(!!)?!)

------------------------------------------------------------------------------------------------------

	# console/ansi .. console/form(s/) .. console/mux ...

		=> dialog/whiptail styles .. but w/in "application()" and with "mux"!

		=> WEB.form(s) auch .. PARALLEL (durch PARALLELE STREAMS!?! [== parallele formate, streams in dateien, passt also zusammen]

		=> text-db .. sprach-lokalisierungs usw. .. und größeres konzept für call/return mit switch() oder virt. funktionen "mappen" etc.

------------------------------------------------------------------------------------------------------

	# wichtige konsolen-style-utlities...

		# String.toText();

			=> vor allem der umbruch passend zu texten ...

			=> und es geht darum, bei zu großen ausgabe-strings die nächste(n) zeilen bei einer bestimmen
			breiten-/offset-positionen zu beginnen. so dass es ordentlich aussieht!

		# String(?).toTable();

			=> einerseits sowas wie `ls -l` (!!)

			=> andererseits einteilung der console in bereiche und sub-bereiche etc. ..(!!!!!!)

------------------------------------------------------------------------------------------------------

	# Array.maxLength
	# String.maxLength

		=> interesting ..! also for log files maybe? ;-D´ (also see "log/"!)

		=> eher eigene "struct/" (??); array-/string-zugriffe problematisch wg. accessors

	=> log(/rotate)

		=> EXTRA ZUSATZ-FUSE-FS!?? oder anders??

		=> mit bedenken, alles zu loggen (optional? immer dazu?)

		=> evtl. "yfs" bedenken (extra log-files w/ rotation & size-limit)

		=> und sowieso size-limits gliech dazu!

		=> LOG *SERVER* und CLIENTs. ... ständiges protokoll *direkt* in's netzwerk zu anderem host!!

------------------------------------------------------------------------------------------------------

	# Array.prototype.get(..); .. etc. pp. ...

	# überall "offset()" .. (String/Array)

		=> w/ überall auch "_length" (nicht absolutes "_to" o.ä.) ..

			=> so: test if negative length worx (reversing order)!!

			=> ebenso: wiederholungen ab (0) oder so ebenso, bei _length > this.length!!

		=> auch negative offsets ... addition zur länge der arrays/strings etc. .. vom ende aus rückwärts gezählt ;-)´

	# String.capitalize(_all, _char);

	# (String|Array).rotate(_diff);

	# String.rotateValues(_diff);

		=> u.a. "rot13" ;-)´

		=> what about using "alphabet"? wg. *echtem* (ascii-character-)rot13!?!

	# (Array|String).prototype.cut()

	# ..replaceAt()

	# ..insert()

	# ..cut()

	...

	# String(/Array).replaceAt(_start, _length, _replaceBy) // ausscheniden && beliebig einfügen

		=> 'insert()' sowie 'cut()' basieren darauf!!! :-D


		# string[0] = 'x'; // GEHT NICH!! selgit bst neue funktionen dazu .. (w/ substr() maybe ;)´

		# string..upperCaseAt & lowerCaseAt()

	..

	# *.equals() u.a. .. "überall". ... von wegen reference type vs. values (to compare!) ..

	...

	# Object.(values||types||forEach||..) && Array.(..) ...

------------------------------------------------------------------------------------------------------

	# basics ..

			# String.sprintf();
			# String.prototype.sscanf();
			# console.printf();
			# console.scanf();

		=> interessant: weitere, eigene "PATTERN MATCH (ENGINEs)"!!

			=> beste lösungen, evtl. direkte, plane "BNF"-anbindung für automat. RFC-implement. .. *gg*

			=> was wäre sinnvoll für das meißte (alle notwendigkeiten/elemente betrachten und allgemeine logik-aussage(n) formulieren)!

				=> geht z.b. um netzwerk-protokolle .. aber auch script-konversion oder code-abarbeiten .. bis zu db-"evaluation"(?)! etc.

			# (*).glob();

		> glob()

			=> alle *glob* auch "inverse"..! ;-)´

			=> statt (prefix||suffix)() => lieber (*glob*) ..
				... oder zusätzlich? prefix/suffix läuft ganz gut eig.!?!

				=> object/string.js => return (false||true)
				=> object/object.js => anwendung auf keys()
				=> object/array.js => schon fedisch; testen, sobald "String.prototype.glob()" fedisch;

------------------------------------------------------------------------------------------------------

	# < https://github.com/mafintosh/fuse-bindings >

		# ohne abhängigkeiten... siehe dir die codes mal an und versuche, selbst sowas zu "portieren" .. bestenfalls ganz neues fuse >= 3.0! ;-)´

		# extension für meine datenbank ...

			# datenbank w/ ..

				(a) x/y oder width/height

				(b) (SOMIT (a)!!) auch ID/PID trees (und damit unendlich tiefe dateisysteme!!! und alles andere)

				(c) zell structs .. leere .. raumzeit-koord-relays .. zahlensysteme .. carrier-codes .. ausweitung usw. ..

				(d) FLACH .. 1d-abstraktion führt zu abs. hoch-dimensionlen, filligranen strukturen .. auch software-bewegungen/-strukturen v.a.!

				(e) AKTIV .. direkte anbindung der sw-pointer w/ context o.ä. etc. und db-bewegungs-protokoll @ hebelung/hangelung ..

				(f) .. (TODO) .. WICHTIGSTE BASIS ÜBERHAUPT DAS GANZE!

				(g) .. btw. auch für web-publikation w/ wiki etc., aber auch "ypkg"-software-pakete-datenbank usw. .. sowie "Git"-alternative!! ;-)´

				(h) .. crypto .. compress .. hash .. snapsshots .. boot-from .. UND SO SO VIELES MEHR! .. (stop!) .. logging .. netzwerk! LVM! RAID!

------------------------------------------------------------------------------------------------------

	# restliche "file"-methoden

			# file.find() funktioniert noch nicht ganz. ... siehe auch "test/files/find.js" (erster teil ok, zweiter *nicht*!)

			# fs-listen-mapping/-filter (array-aktionen und coreutils)
			# file.mode() w/ array-filter
			# array-filter w/ prefix/suffix, relativeTo und XARGS(!)
			# .. sowie auch alle durchlaufen für summation der file-GRÖßEN!! ;-)´
			# new File(); .. w/ list-to-struct(s) (@ arr-filter)
			# website+news+todo+docs+wiki+issues/forum+git w/ api @ net/http+git+smtp+nntp+irc
			# uuid & services w/ account @ dyndns+space
			# ypkg @ lib+linux (live/any) w/ forms+mux (@ net/ssh)
			# (flache, aktive) datenbank und kombination/abstraktion (lib.)js+ylinux+community w/ net+js+db+linux+apps+community+mud+oo

		# file.chmod()

			=> (chmod||chown)(.., _recursive); // rekursion @ directories!!! :-D

			=> "TypeError: global.nodejs.fs.lchmodSync is not a function"

				=> is this the same somewhere else (e.g. 'chown')!?

		# file.grep()

			=> still missing.. *MUST* BE *ASYNC*..!!!

		# file.find()

!!!!!!!!!! =>		=> REALLY SLOW!!! 17secs. vs. `find` w/ ~1sec!!! .. solve! (@ "stackoverflow"!???)

			=> richtige reihenfolge im ergebnis-array?

			=> EACCESS etc. werden nicht mit in's array gelistet .. sollte shcon, oder?!

			=> String..glob(); .. wichtig für solche suchläufe ..!! (incl. _caseSensitive)

			=> relative pfade im ergebnis-array? oder absolute? oder wie?

				=> array-pfad-filter .. usw. .. `xargs()` .. oder aktionen wie "chmod()" auf eine pfad-liste .. und FILTER like callbacks eben.

				=> VIRTUELLE FILE-OBJEKTE. dank code-virtualisierung .. einfach quasi in jeden array-pfad-string "?mode=1777&size=1024" etc.!!!!!!!

------------------------------------------------------------------------------------------------------

	!!!! CODE VIRTUALISIERUNG !!!!

		.. wie in pfad-arrays w/ "?date=..&mode=1777&size=2048" usw..!

	DA GIBTS SO VIELE MÖGLICHKEITEN!! DAS GEHT GANZ BIS ZUR SPRACH-ABSTRAKTION, DANN SOGAR NOCH (*STRING*!) CPU-LOGIK ODER PHYSIK (bis wellen und teilchen)!

------------------------------------------------------------------------------------------------------

	# console... => every global thing in my lib should be prefixed by 'global.'... also 'console..'!

		=> `grep -ri 'console.'|grep -v 'global.console.'`

------------------------------------------------------------------------------------------------------

	# doc/txt/PROXY.txt

		lohnt sich des? ne! eigenes scripting QUASI .. o.ä. .. besser is: VIRTUALITÄT @ 1d-string-abstraktion (w/ database(+fs))!

------------------------------------------------------------------------------------------------------

	=> readlink-fs-traverse .. "util/traverse.js" or so; nutzung in any/linux z.b. etc(??)
	=> schrittweise auflösung von symlinks .. mit verzeichnis-"traversing" zur auswahl von
		js-scripts in verzeichnis-hinein-gehen durch jeden symlink-resolve - so finden
		der letzten 'main.js'

			.. also sprich: während wir schrittweise symlinks auflösen, ist von schritt zu
			schritt jew. ein datei-name vorliegend, in dem wir das nächste sub-verzeichnis
			finden .. dort wieder ein nächstes sub-verz. auf basis des folgenden resolve'd
			symlink usw. ... bis am ende kein link mehr steht, sondern konkrete datei - um
			dann die letzte .js-datei zu wählen (bzw. main.js, passend unter directories);

				=> modularität

------------------------------------------------------------------------------------------------------

	# "document/html" ... @ HTML-DOM-Parser..! :-)´

		=> .. und andere formate .. script-codes ... am besten ALLES ALS DOM BEHANDELT!?! ;-D´

------------------------------------------------------------------------------------------------------

	# "/node.js" @ main.start()

		@ correct use of the class "main.cluster" w/ "main.createCluster()" ...

			=> maybe own event communication protocol for IPC?

			... how should all of my processes communicate to handle everyhting together..!?
				.. (yes, that "ipc" styles should do it?!! or stream-sync bzw. stream-pipelines..)

------------------------------------------------------------------------------------------------

	@ setup.(js|sh)

		# check, ob alle tools installiert sind (git z.b.) ..

			=> auch Node.js selbst; sonst selbst organsisierte installation (& upgrades etc.)

		@ dialog styles .. (yad? my own?!)

		# github clone .. /lib.js

		# mkdir -p /usr/lib.js /usr/local/lib.js

		# chmod .. @ files @ directories ...

		# /etc/resolv.conf (@ dyndns server ;-)

		# (github-)update-script (w/ cronjob!?!)

------------------------------------------------------------------------------------------------------

	# dyndns .. hosting .. w/ .zahl/ (siehe "settings.account" ;-)´

------------------------------------------------------------------------------------------------------

	# global.console.object()

		=> replacement for "console.inspect()"?!?

		=> TODO: finish it..

------------------------------------------------------------------------------------------------------

	# String.prototype.(hasFunction||toFunction)();
	# Function.prototype.from(.array||.string);

		=> bis sogar JSON funktionen beherrscht!?!?!??

	# String.prototype.hash[.sha3](_radix)
	
	# global.file.hash(.sha3) => implement sha-3 "native" in js ..! :-)´

		=> also use this function for whole directories and sub-directories (_depth);
			.. so even every file (etc.? the dir structure 2??) is hash'ed into a sum! :-)

		=> to be implemented in "./crypto/" ...!! (how to give it to a "String" or under "file.."??

------------------------------------------------------------------------------------------------------

	# file.lock()? file.diff()? file.fill/truncate()!???

	# file.find()

		=> rekursive suche .. w/ *glob* evtl. .. maybe _depth_from, _to, ..? und _type!

			=> BESSER "Array-filter" @ listen ... filter vs cb-/logik-apply @ list-elements

	# file.copy()

	# file.move()

	# file.rename()

		=> ebenso optional rekursiv für alle dateien mit gleichem namen ..

	# file.remove -> siehe kommentar!

		=> remove as much as possible!

		=> removeAt(path, from, to) => von tiefe bis zu tiefen "alles" entfernen

		=> w/ *glob* (oä) für nur teil-aswahl

		=> ebenso teil-auswahl durch --type (dir etc)


	# file.tree() neben file.list() .. plus _FILTER! (siehe list o.ä.?? eher glob??)

		=> falls *glob*, dann evtl. auch in den anderen funktionen!?! (list etc)

		=> soll auch das unix-tool `tree` ersetzen können! ;-)´

		=> siehe auch _type ..

------------------------------------------------------------------------------------------------------

	# (de-)serialisierung; @ own object codebase(s) .. mit div. (db-like-)optimierungen ..! ;-D´

		=> statt JSON eigene formate, im sinne von "flat-file"-datenbank ..

		=> datenbank-virtualisierung ..

		=> und db-query(-language) - "statt" referenzen im script


	# eigene objekte w/ database-zugriffen ..

		=> evtl. hilft's ja .. wenn ich get/set-accessoren verwende?

			.. so im sinne ganzer objekt-zugriffe statt nur einzelne attribute?! :-D

------------------------------------------------------------------------------------------------------

	# "ALLES" (.. zumweiterdenken!) relativieren durch "settings" .. hin zu globalem ..

		=> "dictionary" etc.. so dass selbst variablen-namen variable werden; ..
		.. was ich nur nutze zum weiterdenken in richtung automatismus und "gehirn";

			=> was wäre daraus zu machen, wenn mehrfache variablen-zugriffe durch ein
				dictionary bestimmte keys hätten. etc..

------------------------------------------------------------------------------------------------------

	# (most of the) following vars are only set in "interpreter" mode ..

		=> bring it to regular mode .. (sobald "file.readlink*()" wieder einsatzbereit ;)

			process.file
			process.list	[]
			process.full
			process.base	[]
			process.real
			process.name

------------------------------------------------------------------------------------------------------

	# test if all my changes work .. meaning: test *every* single function, if it works as expected ..! be sure..

	# also test if 'export JS_LIBRARY_PATH' worx! (remember: not existing dirs will be removed! ;-)

------------------------------------------------------------------------------------------------------

	WICHTIGe basis: "doc/txt/OBJECT-TODO.txt" @ Object.prototype.TODO ^_^

		=> TODO is more automatism. for this.. so more concrete code structure and algoirthms!

------------------------------------------------------------------------------------------------------

	# security/permissions on functions and objects etc pp. "object.auth()" etc. .. "obj.register()" pp. ...

------------------------------------------------------------------------------------------------------

	# browser-kompaitiblität

		=> ALLES? idee schon oben .. oder teile wenigstens, siehe "util/*" ..

------------------------------------------------------------------------------------------------------

	# core/master etc.

		=> IPC. siehe threads, netzwerk, cluster, ..

		=> mud-erweiterungen .. synchronized _context z.b. etc.

			=> w/ SCRIPT(ING)-CONTEXT(s)

		=> threading .. u.a. server sollen multiple cpu-kerne sowie netz-lasten-verteilung nutzen

------------------------------------------------------------------------------------------------------

	# *own* "Math.round(_number, _precision)"

		=> siehe "test/math/round.js"..!!

------------------------------------------------------------------------------------------------------

	# process.exit();

		# Error.prototype

			=> process.exit() w/ "Error" evtl. .. so dass "Error.prototype.code" o.ä. ..
				.. bzw. bedenken, dass "process.exit" auch strings nimmt?
				... so oder so ähnlich ..

				=> evtl. result-code von "Error.prototype.stack" abhängig machen; im sinne von
					.. String.prototype.(hash||sum(byte)) o.ä.

		// somehow ... verbindung von process.exit() w/ fehler-code-rückgabe mit regulären
			.. "Error"-throw() oder so .. damit "Error" passende (int ==> byte) values
			als prozess-result bereit stellen?

		// bzw. wo ich eine fehlermeldung habe oder einen fehler-name wenigstens . dadurch
			lässt sich eine (%256)-byte-summe berechnen, die als process.result geht?!

		// oder einfach eine datenbank - am besten direkte hierarchie aller fs-dict. (api)
			so weit, dass wir zb '_error_wrong_type' einfach an 'process.exit' oder zu
			throw() o.ä. geben können ...

				// PS:

				... die GLOBALE verwendung von (PSYC'ish) MC-strings (_echo_message, ..)
				kann sich positiv auswirken ... gerade, was die RESULT-RÜCKGABE angeht!!

					→ jede höhere funktion kann dann damit beginnen, den ersten '_'-
					.. anteil zu "switch()" en - oder eben eher direkt im MAP(PING)-
					HEBEL weiter zu relayen usw. ... der reihe nach alle hierarchie-
					ebenen (in '_error_one_two' sind das ja drei dimensionen .. USW)

------------------------------------------------------------------------------------------------------

	# .(?)/vector.js w/ ./matrix.js

		=> extra vektor- und matrix-arithmetik (etc.); gerade wg. 3d-vektor-(grafik-)engine!?!

			=> @ mul, div, add, sub, mod, .. AT LEAST.

	# # *own* Number.* ..
	=> maybe "Figure" .. w/ ABSTRACT MATHs ..

		@ vektor-raumzeit- und pointer-arithmetics ..

			=> vector gfx drawing engine (@ browser?! w/ console??)

		=> "Number" komplett ersetzen [möglich?]? SONST evtl. einfach @ "3DScript"


	=> BigInt .. => "BigNumber" (siehe dazu auch die paar bookmarks

	=> BigBoolean bzw. BigBit!? BigByte? ^_^


	ich möchte ganz eigene "Figure"-klasse für meine eigene zahl haben.


		... geht u.a. darum, dass ich mit ihr erstmal (u.a.!?) ABSTRAKT in strings und feldern
		(zahlensysteme(-max)) berechne und umwandle ... und zahlen durch bit-byte-symbol-rot()
		in ihrer "verschränkten" string-betrachtung nie wie reguläre zahlen behandle (vielmehr
		...

			.. es gilt, die ÄUßEREN (Koordinaten-(/offset-(/length-)))BEZÜGE aller SYMBOLE
			mehr zu betrachten ... mit diesen dann rechnen (und v.a. konvertieren etc. und
			rotieren usw.) so, dass die symole bewegt und damit verschoeben werden etc. w/
			bereichs-auswahlen sogar usw. ...

				konstruktion zu energie-vektoren in nD-dimensionalität; raumzeit-GRID;


		[WICHTIG] ( TODO )

			studiere die quanten ganz genau .. felder und prozesse ... bewegungen & division!

			system-limits innen/außen .. tabellen- und code-symbol-rotationen .. NOT()-syskonv.

			bis hin zur vektor-raumzeit-arithmetik .. und denkprozess in koord.-sys-(/offset-)

			(gfx/geometrie-)(!!)transformationen ... etc. pp. ... (natürl. w/ absttr.-denken).


	=> siehe "doc/txt/NUMBER.txt"!

------------------------------------------------------------------------------------------------------

	# global.execute() vs. (v.a.) "global['$'](cmdLine)"!!!!!

		gerade sowas ..


			var dirs = $("find ./ --type d")
				.split("\n");


		BZW ODER DIREKT IN KONFIGURATIONS_SCRIPT_DATEIEN!



			const threads = $('nproc') + 1;	// AM BESTEN direkt integriert: "parseFloat||Number"();
								... dass in zahlen-rück-/ausgabe pur => calc()!



			beachte nur evtl. "PATH"-config .. muss *EVTL* in "process.env['PATH']",
			EVENTUELL ABER auch selbst sowas mit implementieren ... dass meine soft-
			ware as eine shell selbst alle ihre (eigens verwalteten) pfade so unter-
			sucht! ^_^


					=> TODO: sub-directories einbeziehen in $PFAD-suchläufe;

						.. so kann jede shell nicht umgehen mit der eingabe
							von sowas wie ...


!! ->						/ $> editor/vim


					.. auch wenn "/bin/editor/vim" existiert etc.!


					PPS: CONFIG-FILE-PARSER!! wird dann zum SCRIPT-FILE-INTERPRETER!!

						nicht die "LOCK" möglichkeit für config-vars vergessen,
						sowohl für einzelne wie auch viele settings (by *GLOB*,
						während alle settings (etc) eine hierarchische semantik
						eingehene ;-)´ ...

						.. und natürlich gruppen [ [global], [user:kekse], [group:any] ]

							... die auch noch "inherit()" ableiten/erben können.

							.. sowie "#include" o.ä. zur einbindung, inkl. sub-
							verzeichnisse w/ any (glob) file etc. ..

									include('ld.js.conf.d/*.conf');

				... sonstige GEHEIMNISSE "guter"[tm] codierbarkeiten!??

======================================================================================================
			ZUM SCHLUSS ARBEITE ALLE /maschinenstadt/doc/txt/ (min.) AB. ...
======================================================================================================
