< https://developer.mozilla.org/en-US/docs/Web/JavaScript >


	// < https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming >
	//
	// < https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy >
	// < https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect >


	// < https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays >


	function test(a, b = 1, c = b) {	// default values for arguments..!!
						// since 'b', 'c' can already use 'b'
		return a * b;			// regularily they're "undefined"..
	}


	function f(a, b, ...args) { }


	// < https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment >
	//
	var a, b, rest;
	[ a, b ] = [ 10, 20 ];
	[ a, b, ...rest ] = [10,20,30,40,50];
	[ a, , b ] = [1,2,3]; // => [1,3]
	[a,b] = [b,a];	// < https://en.wikipedia.org/wiki/XOR_swap_algorithm >


	# Object.keys(_object);
	# Object.getOwnPropertyNames(_object);


	var d = Date.prototype;
	Object.defineProperty(d, 'year', {
		get: function() { return this.getFullYear(); },
		set: function(y) { this.setFullYear(y); }
	});


	var expr = 'foo';	// computed property names!
	var obj = {
		get [expr]() { return 'bar'; }
	};
	console.log(obj.foo);


	Object.defineProperty(person, 'age', {
		value: 42,
		writable: true,
		enumerable: true	// for(var key in .. => will show this
	});


	class LogView extends View {
		constructor(options) {
			this.model = options.model;
			this.template = options.template;
			console.log(LogView.staticMethod());
		}
		render() {
			super.render();	// super is view (extended by this) class
			this.constructor.staticMethod();	// instead of class name
			return _.template(this.template, this.model.toObject());
		}
		static staticMethod() {
			return 'static method has been called';
		}
		static secondStaticMethod() {
			return this.staticMethod() + ' from another static method'; // 'this' only in static's
		}
	}
	
